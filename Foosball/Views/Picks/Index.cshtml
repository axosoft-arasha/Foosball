@model List<Foosball.Models.PickViewModel>

<div class="row">
	<div class="col-md-5">
		<h2>Week @ViewBag.Week @(ViewBag.IsMaster ? "Master" : "") Picks</h2>
		<h6>Click a team to pick it</h6>
	</div>
	<div class="col-md-7 right">
		<nav class="picks-nav">
			<ul class="pagination">
				@for (int i = 1; i <= ViewBag.CurrentWeek; i++)
				{
					<li class="@(i == ViewBag.Week ? "active" : "")">
						@if (ViewBag.IsMaster)
						{
							<a href="@Url.Action("", new { week = i, isMaster = ViewBag.IsMaster })">@i</a>
						}
						else
						{
							// don't want isMaster to show up for non-admin
							<a href="@Url.Action("", new { week = i })">@i</a>
						}
					</li>
				}
			</ul>
		</nav>
	</div>
</div>

<table id="picksTable" class="row-border" cellspacing="0">
	<thead>
		<tr>
			<th></th>
			<th></th>
			<th>Time</th>
			<th></th>
			<th>Away</th>
			<th></th>
			<th>Home</th>
			<th></th>
			<th></th>
		</tr>
	</thead>
</table>

<script type="text/javascript">
	$(document).ready(function () {
		$('#picksTable').dataTable({
			"ajax": _rootDir + 'picks/listdata' + location.search,
			paging: false,
			ordering: false,
			sorting: false,
			searching: false,
			info: false,
			order: [],
			columns: [
				{ data: 'Schedule.Date' },
				{ data: 'GameDateDisplay' },
				{ data: 'GameTimeDisplay' },
				{ data: 'IsPick' },
				{ data: 'Schedule.AwayTeam' },
				{ data: '' },
				{ data: 'Schedule.HomeTeam' },
				{ data: 'CombinedScore' },
				{ data: 'CanPick' }
			],
			columnDefs: [
				{
					targets: 0,
					visible: false
				},
				{
					targets: 1,
					visible: false
				},
				{
					targets: 3,
					width: '50px',
					render: function (data, type, row) {
						return '<span class="has-picked">' + (data ? 'pick saved' : '') + '</span>';
					}
				},
				{
					targets: 4,
					class: 'column-right',
					createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
						var td = $(cell);
						td.data('scheduleId', rowData.Schedule.Id);
						td.data('isHomeTeam', false);

						if (rowData.IsPick && !rowData.PickHomeTeam) {
							td.addClass('picked');
							if (rowData.IsCorrect) {
								td.addClass('correct-pick');
							}
							else if (rowData.IsCorrect == false) {
								td.addClass('incorrect-pick');
							}
							else {
								td.addClass('picked-current');
							}
						}
						if (rowData.CanPick) {
							td.addClass('pickable');
						}
					},
					render: function (data, type, row) {
						var dom = '<span class="team-name-list">' + data.Name.toUpperCase() + '</span><img class="team-logo-small" src="' + data.ImageUrl + '"/>';

						return dom;
					}
				},
				{
					targets: 5,
					class: 'column-center',
					render: function () {
						return '<span class="column-at">AT</span>';
					}
				},
				{
					targets: 6,
					createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
						var td = $(cell);
						td.data('scheduleId', rowData.Schedule.Id);
						td.data('isHomeTeam', true);

						if (rowData.IsPick && rowData.PickHomeTeam) {
							td.addClass('picked');
							if (rowData.IsCorrect) {
								td.addClass('correct-pick');
							}
							else if (rowData.IsCorrect == false) {
								td.addClass('incorrect-pick');
							}
							else {
								td.addClass('picked-current');
							}
						}
						if (rowData.CanPick) {
							td.addClass('pickable');
						}
					},
					render: function (data, type, row) {
						var dom = '<img class="team-logo-small" src="' + data.ImageUrl + '"/><span class="team-name-list">' + data.Name.toUpperCase() + '</span>';
						return dom;
					}
				},
				{
					targets: 7,
					width: '75px',
					class: 'total-points',
					createdCell: function (cell, cellData, rowData, rowIndex, colIndex) {
						var td = $(cell);
						td.data('scheduleId', rowData.Schedule.Id);
					},
					render: function (data, type, row) {
						if (!row.Schedule.RequireScore) {
							return '';
						}
						return '<div><input placeholder="POINTS" type="text" class="form-control" maxlength="3" value="' + (data ? data : '') + '" ' + 
							(row.CanPick ? '' : 'readonly="readonly"') + ' /><span class="has-picked">' + (data ? 'score saved' : '') + '</span></div>';
					}
				},
				{
					targets: 8,
					width: '20px',
					render: function (data, type, row) {
						return data ? '' : '<span class="glyphicon glyphicon-lock"></span>';
					}
				}
			],
			rowCallback: function (row, data, index) {
				if (!data.CanPick) {
					$(row).addClass('locked');
				}
			},
			drawCallback: function (settings) {
				var api = this.api(),
					rows = api.rows({ page: 'current' }).nodes(),
					last = null,
					tieBreakerRow = '<tr><td colspan="7">&nbsp;</td></tr>';
 
				api.column(1, { page: 'current' }).data().each(function (group, i) {
					var lastRow = (i == rows.length - 1);

					if (last !== group) {
						$(rows).eq(i).before(
							(lastRow ?
								tieBreakerRow + '<tr class="group tie-breaker"><td colspan="5">' + group + '</td><td>TOTAL POINTS</td><td></td></tr>' :
								'<tr class="group"><td colspan="7">' + group + '</td></tr>')
						);
 
						last = group;
					}
				} );
			}
		});
	});

	$('#picksTable')
		.on('click', 'td.pickable', function (e) {
			savePick($(this));
		})
		.on('click', 'td.pickable input', function (e) {
			// clicking on input box should not select anything
			e.stopPropagation();
		})
		.on('click', 'td.pickable span', function (e) {
			e.stopPropagation();

			savePick($(this).parent());
		});

	$('#picksTable')
		.on('keyup', 'input.form-control', function () {
			clearTimeout($.data(this, 'timer'));
			var wait = setTimeout(saveScore, 500, $(this));
			$(this).data('timer', wait);
		});

	function savePick(td) {
		var	tr = td.parent(),
			scheduleId = td.data('scheduleId'),
			isHomeTeam = td.data('isHomeTeam');

		save(scheduleId, isHomeTeam, null, tr, td);
	}

	function saveScore(input) {
		var div = input.parent(),
			td = div.parent(),
			tr = td.parent(),
			scheduleId = td.data('scheduleId'),
			score = input.val();
	
		div.removeClass('has-error');

		if (!$.isNumeric(score)) {
			div.addClass('has-error');
			return;		
		}

		try {
			score = parseInt(score, 10);
		}
		catch(ex) {
			div.addClass('has-error');
			return;		
		}

		if (score < 0) {
			div.addClass('has-error');
			return;
		}

		save(scheduleId, null, score, div);
	}

	function save(scheduleId, isHomeTeam, combinedScore, tr, td) {
		// save the pick
		$.ajax({
			url: _rootDir + 'picks/pick@(ViewBag.IsMaster ? "?isMaster=true" : "")',
			method: 'POST',
			data: {
				PickHomeTeam: isHomeTeam,
				CombinedScore: combinedScore,
				Schedule: {
					Id: scheduleId
				}
			},
			success: function (e) {
				console.log('pick saved');

				if (tr) {
					tr.find('td').removeClass('picked');
					tr.find('.has-picked:first').text(combinedScore == null ? 'pick saved' : 'score saved');

					if (td)
						td.addClass('picked');
				}
			}
		});
	}
</script>
